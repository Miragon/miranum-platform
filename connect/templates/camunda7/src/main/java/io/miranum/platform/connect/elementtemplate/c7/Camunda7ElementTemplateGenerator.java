package io.miranum.platform.connect.elementtemplate.c7;

import io.miranum.platform.connect.c7.elementtemplates.gen.Binding;
import io.miranum.platform.connect.c7.elementtemplates.gen.CamundaC7ElementTemplate;
import io.miranum.platform.connect.c7.elementtemplates.gen.Constraints;
import io.miranum.platform.connect.c7.elementtemplates.gen.Property;
import io.miranum.platform.connect.elementtemplate.api.BPMNElementType;
import io.miranum.platform.connect.elementtemplate.api.PropertyType;
import io.miranum.platform.connect.elementtemplate.core.*;
import lombok.extern.java.Log;

import java.util.Collections;

@Log
public class Camunda7ElementTemplateGenerator implements ElementTemplateGenerator {

    @Override
    public ElementTemplateGenerationResult generate(ElementTemplateInfo elementTemplateInfo) {
        var elementTemplate = new CamundaC7ElementTemplate()
                .withName(elementTemplateInfo.getName())
                .withId(elementTemplateInfo.getId())
                .withAppliesTo(Collections.singletonList(BPMNElementType.BPMN_SERVICE_TASK.getValue()));

        // Add external task property
        var implementationProperty = createExternalTaskProperty();
        elementTemplate.getProperties().add(implementationProperty);

        // Add property for the topic of the external task
        var implementationTopicProperty = createExternalTaskTopicProperty(elementTemplateInfo.getType());
        elementTemplate.getProperties().add(implementationTopicProperty);

        // Add properties for input parameters
        for (var inputProperty : elementTemplateInfo.getInputProperties()) {
            var property = createPropertyWithValue(inputProperty, false);
            elementTemplate.getProperties().add(property);
        }

        // Add properties for output parameters
        for (var outputProperties : elementTemplateInfo.getOutputProperties()) {
            var property = createPropertyWithValue(outputProperties, true);
            elementTemplate.getProperties().add(property);
        }

        var json = CamundaC7ElementTemplateConverter.toJsonString(elementTemplate);
        return new ElementTemplateGenerationResult(elementTemplateInfo.getId(), elementTemplateInfo.getVersion(), json, TargetPlatform.camunda7);
    }

    private Property createPropertyWithValue(ElementTemplatePropertyInfo info, boolean output) {
        var value = output ? info.getLabel() + "Result" : "";
        var bindingType = output ? Binding.Type.CAMUNDA_OUTPUT_PARAMETER : Binding.Type.CAMUNDA_INPUT_PARAMETER;
        var property = new Property()
                .withLabel(info.getLabel())
                .withType(info.getType().getType())
                .withChoices(null)
                .withBinding(new Binding()
                        .withType(bindingType))
                .withValue(value);

        if (output) {
            property.getBinding().setSource("${" + info.getLabel() + "}");
        } else {
            property.getBinding().setName(info.getName());
        }

        // Only set if false, else jackson will display default value in generated json

        if (!info.isNotEmpty()) {
            property.setConstraints(new Constraints()
                    .withNotEmpty(info.isNotEmpty()));
        }

        if (!info.isEditable()) {
            property.setEditable(info.isEditable());
        }

        return property;
    }

    private Property createExternalTaskProperty() {
        return new Property()
                .withLabel("Implementation Type")
                .withType(PropertyType.STRING.getType())
                .withValue("external")
                .withEditable(false)
                // We set the choices to null, because we don't want to have an empty
                // choices property in the JSON. This can be fixed by not creating an
                // empty list in the first place, but this is what got generated by the
                // jsonschema2pojo generator.
                .withChoices(null)
                .withBinding(new Binding()
                        .withType(Binding.Type.PROPERTY)
                        .withName("camunda:type"));
    }

    private Property createExternalTaskTopicProperty(String type) {
        return new Property()
                .withLabel("Topic")
                .withType(PropertyType.STRING.getType())
                .withValue(type)
                .withEditable(false)
                .withChoices(null)
                .withBinding(new Binding()
                        .withType(Binding.Type.PROPERTY)
                        .withName("camunda:topic"));
    }
}