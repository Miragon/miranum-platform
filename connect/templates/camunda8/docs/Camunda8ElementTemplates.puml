@startuml
class Camunda8ElementTemplate {
    - String name
    - String id
    - String description
    - Integer version
    - Boolean isDefault
    - List<String> appliesTo
    - ElementType elementType
    - Metadata metadata
    - Boolean entriesVisible
    - List<Group> groups
    - String documentationRef
    - List<Property> properties
    - Icon icon
}
note right of Camunda8ElementTemplate::name
    Required
end note
note right of Camunda8ElementTemplate::id
    Required
end note
note right of Camunda8ElementTemplate::appliesTo
    Required
end note
note right of Camunda8ElementTemplate::properties
    Required
end note
Camunda8ElementTemplate::properties -- Property
Camunda8ElementTemplate::metadata -- Metadata
Camunda8ElementTemplate::group -- Group
Camunda8ElementTemplate::elementType -- ElementType
Camunda8ElementTemplate::icon -- Icon

class Metadata {}

class Group {
    - String id
    - String label
}
note right of Group::id
    Required
end note
note right of Group::label
    Required
end note

class ElementType {
    - String value
}
note right of ElementType::value
    Required
end note

class Icon {
    String contents
}
note right of Icon::contents
    Required
end note

class Property {
    - String id
    - Object value
    - String description
    - String label
    - String type
    - Boolean editable
    - List<Choice> choices
    - Constraints constraints
    - String group
    - Condition condition
    - Binding binding
    - Boolean optional
    - String feel
    - String language
}
note right of Property::binding
    Required
end note
Property::choices -- Choice
Property::constraints -- Constraints
Property::condition -- Condition
Property::binding -- Binding

class Choice {
    - String name
    - String value
}
note right of Choice::name
    Required
end note
note right of Choice::value
    Required
end note

together {
    interface Condition {}

    class SingleCondition implements Condition {
        - String TYPE = "simple"
        - String property
        - Expression expression
    }
    note right of SingleCondition::property
        Required
    end note
    note right of SingleCondition::expression
        @JsonUnrapped to flatten the Object
    end note
    SingleCondition::expression -- Expression

    interface Expression {}

    class Equals implements Expression {
        - Object equals
    }

    class OneOf implements Expression {
        - List<Object> oneOf
    }

    class MultipleCondition implements Condition {
        - List<SingleCondition> allMatch
    }
    note right of MultipleCondition::allMatch
        Required
    end note
}

together {
    class Constraints {
        - Boolean notEmpty
        - Double minLength
        - Double maxLength
        - String pattern
    }
    Constraints::pattern -[#red]- Pattern
    note right on link #red
        According to the JSONSchema, pattern can be
        either of type String or of type Pattern.
    end note

    interface Pattern {}

    class PatternObject implements Pattern {
        - String value
        - String message
    }

    class PatternString implements Pattern {
        - String pattern
    }
}

class Binding {
    - Type type
    - String name
    - String source
    - String key
}
note right of Binding::type
    Required
end note
Binding::type -- Type

enum Type {
    PROPERTY
    ZEEBE_TASKDEFINITION_TYPE
    ZEEBE_TASKDEFINITION_RETRIES
    ZEEBE_INPUT
    ZEEBE_OUTPUT
    ZEEBE_PROPERTY
    ZEEBE_TASKHEADER
}

@enduml
